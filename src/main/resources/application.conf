akka {
  actor {
    provider = akka.cluster.ClusterActorRefProvider
    serialization-bindings {
      "com.trueaccord.scalapb.GeneratedMessage" = proto
      "scala.Tuple2" = kryo
    }
    serializers {
      kryo = "com.romix.akka.serialization.kryo.KryoSerializer"
    }
    kryo {
      idstrategy = "automatic"
    }
  }
  remote {
    log-remote-lifecycle-events = off
    enabled-transports = ["akka.remote.netty.tcp"]
    netty.tcp {
      hostname = ${registerd.hostname}
      port = 0
      port = ${?registerd.port}
      maximum-frame-size = 12800000
    }
    netty.ssl.security { // unused config
      key-store = ${registerd.home-dir}"/security/keystore.jks"
      trust-store = ${registerd.home-dir}"/security/truststore.jks"
      key-store-password = ${?registerd.security.key-store-password}
      key-password = ${?registerd.security.key-password}
      trust-store-password = ${?registerd.security.trust-store-password}
      protocol = "TLSv1.2"
      enabled-algorithms = [TLS_DHE_RSA_WITH_AES_128_GCM_SHA256]
      random-number-generator = "AES128CounterSecureRNG"
    }
  }
  cluster {
    roles = ["registerd"]
    distributed-data.durable.lmdb.dir = ${registerd.home-dir}"/ddata"
    allow-weakly-up-members = on
    metrics.enabled = off
    seed-nodes = [
      "akka.tcp://registerd@registerd-seed0.onplatforms.net:2550",
//      "akka.tcp://registerd@registerd-seed1.onplatforms.net:2551",
//      "akka.tcp://registerd@registerd-seed2.onplatforms.net:2552",
//      "akka.tcp://registerd@registerd-seed3.onplatforms.net:2553",
//      "akka.tcp://registerd@registerd-seed4.onplatforms.net:2554",
//      "akka.tcp://registerd@registerd-seed5.onplatforms.net:2555",
    ]
    http.management.hostname = "127.0.0.1"
    http.management.port = 19999
  }
  extensions = [
    "akka.cluster.ddata.DistributedData",
    "com.romix.akka.serialization.kryo.KryoSerializationExtension$"
  ]
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "INFO"
  loggers-dispatcher = "registerd.loggers-dispatcher"
}
registerd {
  loggers-dispatcher {
    type = Dispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
      fixed-pool-size = 2
    }
    throughput = 100
  }
  endpoint {
    hostname: "localhost"
    hostname: ${?REGISTERD_ENDPOINT_HOSTNAME}
    port: 9000
    port: ${?REGISTERD_ENDPOINT_PORT}
  }
  home-dir = ${HOME}"/.registerd"
  pid-file = ${registerd.home-dir}"/registerd.pid"
  blocks-dir = ${registerd.home-dir}"/blocks"
  resources-dir = ${registerd.home-dir}"/resources"
}
